#ifndef ENTITY_H
#define ENTITY_H

#include <memory>
#include "glm/vec3.hpp"
#include "physics/aabb.h"
#include "physics/aabs.h"
#include "graphics/camera.h"
#include "graphics/model.h"

/**
 * Gets the next entityID that has not been used. This method is threadsafe. TODO -- make this threadsafe again
 * @return an int which will uniquely identify an entity
 */
int getNextEntityID();

/**
 * Entity is the base class for all things that exist in the world with some sort of model, and position.
 * @author Alec Sobeck
 * @author Matthew Robertson
 */
class Entity
{
public:
	AABB boundingBox;
    /** An integer which uniquely identifies this entity in the world. Generated by {@link #getNextEntityID} */
	const int entityID;
    /**
     * Constructs a new Entity, assigning it the next valid entityID available and a camera with position
     * and rotation of 0.
     */
    Entity();
    /**
     * Constructs a new Entity, assigning it the entityID provided and a camera with position
     * and rotation of 0.
     * @param entityID an int which must uniquely identify this Entity. It is suggested that this
     * be a value generated from {@link #getNextEntityID()}
     */
    Entity(int entityID);
	/**
	 * Creates a new Entity and assigns it the provided entityID, model, and camera.
     * @param entityID an int which must uniquely identify this Entity. It is suggested that this
     * be a value generated from {@link #getNextEntityID()}
	 * @param model a Model that will be used for this entity
	 * @param camera a Camera that will be used for this entity
	 */
    Entity(int entityID, std::shared_ptr<Model> model, Camera camera);
    ~Entity();
    float getX();
	float getY();
	float getZ();
    bool noClipActive();
    void setNoClipActive(bool isNoClipActive);
    bool affectedByGravity();
	void setAffectedByGravity(bool isAffectedByGravity);
	int getEntityID();
	std::shared_ptr<Model> getModel();
	AABB getAABB();
    void setModel(std::shared_ptr<Model> newModel);
    Camera *getCamera();
	void setCamera(Camera camera);
	/**
	 * Moves the Camera the specified amount.
	 * @param movement a glm::vec3 that describes the movement of the Camera
	 */
    void move();
    void accel(glm::vec3 movement);
	void rotate(glm::vec3 rotation);
    glm::vec3 getRotation();
    glm::vec3 getPosition();
	virtual void onGameTick();

protected:
	/** A model somehow associated to this entity. */
    std::shared_ptr<Model> model;
    /** A camera which controls the movement of this entity. */
    Camera camera;
    glm::vec3 velocity;
	glm::vec3 acceleration;
	double maxMoveSpeed;
private:
	/** True if the entity should follow the laws of gravity, or false if gravity ignores them. */
	bool isAffectedByGravity;
	/** True if the entity is in noclip mode, allowing mostly free movement within the scene. Generally,
	 * it makes sense to have this set to false (except for debug purposes). */
	bool isNoClipActive;
};



#endif
